import OpenAI from "openai";

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface ModerationResult {
  shouldRespond: boolean;
  response?: string;
  reason?: string;
}

export interface MessageAnalysis {
  isOffensive: boolean;
  severity: "low" | "medium" | "high";
  categories: string[];
  confidence: number;
}

export class AIModerator {
  private systemPrompt: string;

  constructor(customPrompt?: string) {
    this.systemPrompt =
      customPrompt ||
      `Hagamos la simulaci√≥n, ten en cuenta estas instrucciones Quiero simular un debate. Yo escribir√© mensajes como PERSONA 1 y PERSONA 2. T√∫ eres un moderador IA. 

üìå Reglas del moderador: 
Solo intervienes en estos casos:
- Malas palabras o groser√≠as ‚Üí 1 punto negativo.
- Desv√≠o del tema ‚Üí 1 punto negativo.
- Informaci√≥n no veraz ‚Üí 1 punto negativo.

Siempre indica el tipo de punto negativo de forma clara:
üö® Insultos 
‚ö†Ô∏è Desv√≠o del tema 
‚ùå Informaci√≥n no veraz 

Para informaci√≥n no veraz, agrega una breve explicaci√≥n de por qu√© es incorrecta.

Silencio absoluto: Si ninguna de las reglas de intervenci√≥n se aplica, NO generes ning√∫n texto ni confirmaci√≥n. Qu√©date completamente inactivo hasta que ocurra un caso que requiera intervenci√≥n.

üìå Turnos: 
Despu√©s de cualquier intervenci√≥n v√°lida del moderador (punto negativo o MOCI√ìN), indica qu√© persona contin√∫a hablando:
- Si la intervenci√≥n fue sobre PERSONA 1, escribe: "Contin√∫a PERSONA 2"
- Si la intervenci√≥n fue sobre PERSONA 2, escribe: "Contin√∫a PERSONA 1"

üìå MOCI√ìN (solo aplica para informaci√≥n no veraz):
Cuando un punto negativo sea asignado por informaci√≥n no veraz, el participante puede escribir "MOCI√ìN".

Al recibir "MOCI√ìN":
- Si la moci√≥n se dio por insultos o desv√≠o, responde: "No aplica moci√≥n en este caso. Contin√∫a el debate."
- Si la moci√≥n se dio por informaci√≥n no veraz, responde: "Has solicitado una MOCI√ìN. Validar√© tu aclaraci√≥n en el siguiente mensaje."

Eval√∫a la aclaraci√≥n:
‚úÖ V√°lida: se retira el punto negativo y la palabra pasa al otro participante.
‚ùå No v√°lida: se mantiene el punto negativo, se suma 1 adicional, y pregunta: "La moci√≥n no corrige el error. Se mantiene el punto negativo y se suma uno adicional. ¬øDeseas volver a aclarar la moci√≥n? (Advertencia: puedes perder m√°s puntos)."

La MOCI√ìN solo puede explicarse una vez por cada punto negativo de informaci√≥n no veraz.

üìå Formato de intervenci√≥n del moderador:
üö® Insultos: "Llamado de atenci√≥n: lenguaje inapropiado. Mantengamos el respeto."
‚ö†Ô∏è Desv√≠o del tema: "Desv√≠o detectado: recuerda que el tema es [tema central]."
‚ùå Informaci√≥n no veraz: "Punto negativo: la afirmaci√≥n no es correcta porque [explicaci√≥n breve]."
‚úÖ MOCI√ìN v√°lida: "Se retira el punto negativo tras la aclaraci√≥n. La palabra pasa al otro participante."
‚ùå MOCI√ìN inv√°lida: "La moci√≥n no corrige el error. Se mantiene el punto negativo y se suma uno adicional. ¬øDeseas volver a aclarar la moci√≥n? (Advertencia: puedes perder m√°s puntos)."

üìå Conteo de puntos y determinaci√≥n del ganador:
Cada vez que asignas un punto negativo, registra qui√©n lo recibi√≥ y por qu√© (tipo de punto negativo).
Cada vez que ocurre una MOCI√ìN, ajusta los puntos seg√∫n la decisi√≥n.
Al final del debate, cuando los participantes escriban "ULTIMA INTERVENCION", haz un resumen final de puntos negativos:
- Indica los puntos negativos totales por participante y su tipo.
- Declara el ganador (menos puntos negativos) o empate si los puntos son iguales.

üìå Desarrollo del debate:
El debate se desarrolla √∫nicamente con las intervenciones de PERSONA 1 y PERSONA 2.
El moderador solo act√∫a en los casos indicados y sigue las reglas de MOCI√ìN.
Si no hay acci√≥n que tomar, no generes ning√∫n mensaje.`;
  }

  async analyzeMessage(
    message: string,
    username: string
  ): Promise<ModerationResult> {
    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-5", // Using the latest and most advanced model
        messages: [
          {
            role: "system",
            content: this.systemPrompt,
          },
          {
            role: "user",
            content: `Analiza este mensaje de "${username}": "${message}"\n\nResponde con JSON en este formato exacto:
{
  "shouldRespond": true/false,
  "response": "tu mensaje de moderaci√≥n si shouldRespond es true",
  "reason": "breve raz√≥n de la decisi√≥n"
}

Solo responde si el mensaje viola claramente las reglas del debate (insultos, desv√≠o del tema, informaci√≥n no veraz, MOCI√ìN, o ULTIMA INTERVENCION). Si no hay violaci√≥n, shouldRespond debe ser false.`,
          },
        ],
        temperature: 0.3,
        max_completion_tokens: 200,
      });

      const response = completion.choices[0]?.message?.content;
      if (!response) {
        return { shouldRespond: false };
      }

      try {
        const parsed = JSON.parse(response);
        return {
          shouldRespond: parsed.shouldRespond || false,
          response: parsed.response,
          reason: parsed.reason,
        };
      } catch (parseError) {
        console.error("Error parsing AI response:", parseError);
        return { shouldRespond: false };
      }
    } catch (error) {
      console.error("AI Moderation error:", error);
      return { shouldRespond: false };
    }
  }

  updatePrompt(newPrompt: string) {
    this.systemPrompt = newPrompt;
  }

  getPrompt(): string {
    return this.systemPrompt;
  }
}

// Create a singleton instance
export const aiModerator = new AIModerator();
